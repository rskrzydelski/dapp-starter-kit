import { useChain, useBalances } from '../hooks/eip1193/eip1193';
import { useForm } from 'react-hook-form';

import Head from 'next/head';
import styles from '../styles/Home.module.css';

const SYMBOLS = ['ETH'];
const DEFAULT_VALUES = {
  address: '',
  amount: '0',
  symbol: SYMBOLS[0],
};

export default function Home() {
  const [chain_handler] = useChain();
  const [ethBalance, sendEth] = useBalances(chain_handler.address);

  const {
    register,
    formState: { errors },
    handleSubmit,
    reset,
    watch,
  } = useForm({
    defaultValues: DEFAULT_VALUES,
  });

  const onSubmit = async (data) => {
    reset(DEFAULT_VALUES);
    sendEth(data.address, data.amount);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>dapp starter kit</h1>
        {chain_handler.address ? (
          <div>
            <p>account: {chain_handler.address}</p>
            <p>chain id: {chain_handler.chainId}</p>
            <p>Balance: {ethBalance} ETH</p>
            <button onClick={chain_handler.disconnect}>disconnect</button>
          </div>
        ) : (
          <button onClick={chain_handler.connect} className={styles.connect}>
            connect
          </button>
        )}
        {chain_handler.address ? (
          <form onSubmit={handleSubmit(onSubmit)}>
            <div className={styles.inputContainer}>
              <input
                {...register('address', {
                  required: 'Address is required',
                  pattern: {
                    value: /[a-zA-Z0-9]{42}/,
                    message: 'Wrong address format',
                  },
                })}
                placeholder='type address'
              />
              <input
                {...register('amount', {
                  required: 'Amount is required',
                  pattern: {
                    value: /[1-9][0-9]*/,
                    message: 'Wrong format',
                  },
                })}
                placeholder='type amount'
              />
              <select {...register('symbol')}>
                {SYMBOLS.map((symbol) => (
                  <option key={symbol} value={symbol}>
                    {symbol}
                  </option>
                ))}
              </select>
            </div>
            <p className='error'>{errors.address?.message}</p>
            <p className='error'>{errors.amount?.message}</p>
            <button type='submit'>confirm send</button>
          </form>
        ) : null}
      </main>
    </div>
  );
}
